cmake_minimum_required(VERSION 3.12)

set(ROOT ${CMAKE_CURRENT_SOURCE_DIR}/..)
set(SRC_ROOT ${ROOT}/src)

MESSAGE("SRC_ROOT ${SRC_ROOT}")

#buid type
if(NOT CMAKE_BUILD_TYPE)
    message(STATUS "Setting build type to 'Debug' as none was specified.")
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build." FORCE)
    # Set the possible values of build type for cmake-gui
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release")
endif()

#output dirs
#MESSAGE("CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES}")
#MESSAGE("CMAKE_GENERATOR_PLATFORM ${CMAKE_GENERATOR_PLATFORM}")
#MESSAGE("CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}")
if(WIN32)
    if("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
        MESSAGE("64 bits compiler detected")
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ROOT}/\@bin)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ROOT}/\@lib)
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ROOT}/\@lib)
    else()
        MESSAGE("32 bits compiler detected")
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ROOT}/\@bin_x86)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ROOT}/\@lib_x86)
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ROOT}/\@lib_x86)
    endif()
else()
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ROOT}/\@bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ROOT}/\@lib)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ROOT}/\@lib)
endif()


if(APPLE)

# foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
#    string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
#    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${ROOT}/\@bin)
#    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${ROOT}/\@lib)
#    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${ROOT}/\@lib)
# endforeach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})

set(CMAKE_XCODE_ATTRIBUTE_WARNING_CFLAGS "-Wno-int-conversion")

endif()


# include dirs
include_directories(
    ${SRC_ROOT}
)

# lib dirs
link_directories(
    ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
)

add_definitions(
    -DLARGEBOARDS
    -DPRECOMPUTED_MAGICS
    -DIS_64BIT
)


if(WIN32)

SET(CMAKE_STATIC_LINKER_FLAGS "/ignore:4221")
SET(CMAKE_CXX_FLAGS_DEBUG "/std:c++17 /Zc:__cplusplus /MTd /Zi /Od /D \"DEBUG\" /D \"_DEBUG\" /WX")
SET(CMAKE_CXX_FLAGS_RELEASE "/std:c++17 /Zc:__cplusplus /MT /O2 /D \"NDEBUG\"")
set(_WIN32_WINNT 0x0502 CACHE STRING "Define Windows API version to use.")

add_definitions(
    /wd4251 # 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
    /wd4819 # code page
    /wd4267 # 'var' : conversion from 'size_t' to 'type', possible loss of data
    /wd4244 # 'conversion' conversion from 'type1' to 'type2', possible loss of data
)

else()

SET(CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG -D_DEBUG")
SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")

add_definitions(
    -std=c++17
)

endif()

# solution name
project(stockfish)

set(SRCS
    ${SRC_ROOT}/benchmark.cpp
    ${SRC_ROOT}/bitbase.cpp
    ${SRC_ROOT}/bitboard.cpp
    ${SRC_ROOT}/endgame.cpp
    ${SRC_ROOT}/evaluate.cpp
    ${SRC_ROOT}/main.cpp
    ${SRC_ROOT}/material.cpp
    ${SRC_ROOT}/misc.cpp
    ${SRC_ROOT}/movegen.cpp
    ${SRC_ROOT}/movepick.cpp
    ${SRC_ROOT}/parser.cpp
    ${SRC_ROOT}/partner.cpp
    ${SRC_ROOT}/pawns.cpp
    ${SRC_ROOT}/piece.cpp
    ${SRC_ROOT}/position.cpp
    ${SRC_ROOT}/psqt.cpp
    ${SRC_ROOT}/search.cpp
    ${SRC_ROOT}/thread.cpp
    ${SRC_ROOT}/timeman.cpp
    ${SRC_ROOT}/tt.cpp
    ${SRC_ROOT}/uci.cpp
    ${SRC_ROOT}/ucioption.cpp
    ${SRC_ROOT}/variant.cpp
    ${SRC_ROOT}/xboard.cpp
)
set(INCS
    ${SRC_ROOT}/apiutil.h
    ${SRC_ROOT}/bitboard.h
    ${SRC_ROOT}/endgame.h
    ${SRC_ROOT}/evaluate.h
    ${SRC_ROOT}/magic.h
    ${SRC_ROOT}/material.h
    ${SRC_ROOT}/misc.h
    ${SRC_ROOT}/movegen.h
    ${SRC_ROOT}/movepick.h
    ${SRC_ROOT}/parser.h
    ${SRC_ROOT}/partner.h
    ${SRC_ROOT}/pawns.h
    ${SRC_ROOT}/piece.h
    ${SRC_ROOT}/position.h
    ${SRC_ROOT}/search.h
    ${SRC_ROOT}/thread.h
    ${SRC_ROOT}/thread_win32_osx.h
    ${SRC_ROOT}/timeman.h
    ${SRC_ROOT}/tt.h
    ${SRC_ROOT}/types.h
    ${SRC_ROOT}/uci.h
    ${SRC_ROOT}/variant.h
    ${SRC_ROOT}/xboard.h
)
set(syzygy_SRCS ${SRC_ROOT}/syzygy/tbprobe.cpp)
set(syzygy_INCS ${SRC_ROOT}/syzygy/tbprobe.h)

add_executable(stockfish
    ${SRCS} ${INCS}
    ${syzygy_SRCS} ${syzygy_INCS}
)

# link libs
if(WIN32)

else()

target_link_libraries(stockfish
    pthread
)

endif()

source_group("" FILES ${SRCS} ${INCS})
source_group("syzygy" FILES ${syzygy_SRCS} ${syzygy_INCS})
